OPEN(2) 		    BSD System Calls Manual		       OPEN(2)

NNAAMMEE
     ooppeenn -- open or create a file for reading or writing

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ffccnnttll..hh>>

     _i_n_t
     ooppeenn(_c_o_n_s_t _c_h_a_r _*_p_a_t_h, _i_n_t _o_f_l_a_g, _._._.);

DDEESSCCRRIIPPTTIIOONN
     The file name specified by _p_a_t_h is opened for reading and/or writing, as
     specified by the argument _o_f_l_a_g; the file descriptor is returned to the
     calling process.

     The _o_f_l_a_g argument may indicate that the file is to be created if it does
     not exist (by specifying the O_CREAT flag).  In this case, ooppeenn requires
     a third argument _m_o_d_e___t _m_o_d_e; the file is created with mode _m_o_d_e as
     described in chmod(2) and modified by the process' umask value (see
     umask(2)).

     The flags specified are formed by _o_r'ing the following values:

	   O_RDONLY	   open for reading only
	   O_WRONLY	   open for writing only
	   O_RDWR	   open for reading and writing
	   O_NONBLOCK	   do not block on open or for data to become available
	   O_APPEND	   append on each write
	   O_CREAT	   create file if it does not exist
	   O_TRUNC	   truncate size to 0
	   O_EXCL	   error if O_CREAT and the file exists
	   O_SHLOCK	   atomically obtain a shared lock
	   O_EXLOCK	   atomically obtain an exclusive lock
	   O_NOFOLLOW	   do not follow symlinks
	   O_SYMLINK	   allow open of symlinks
	   O_EVTONLY	   descriptor requested for event notifications only

     Opening a file with O_APPEND set causes each write on the file to be
     appended to the end.  If O_TRUNC is specified and the file exists, the
     file is truncated to zero length.	If O_EXCL is set with O_CREAT and the
     file already exists, ooppeenn() returns an error.  This may be used to imple-
     ment a simple exclusive-access locking mechanism.	If O_EXCL is set and
     the last component of the pathname is a symbolic link, ooppeenn() will fail
     even if the symbolic link points to a non-existent name.

     If the O_NONBLOCK flag is specified, do not wait for the device or file
     to be ready or available.	If the ooppeenn() call would result in the process
     being blocked for some reason (e.g., waiting for carrier on a dialup
     line), ooppeenn() returns immediately.  This flag also has the effect of mak-
     ing all subsequent I/O on the open file non-blocking.

     When opening a file, a lock with flock(2) semantics can be obtained by
     setting O_SHLOCK for a shared lock, or O_EXLOCK for an exclusive lock.
     If creating a file with O_CREAT, the request for the lock will never fail
     (provided that the underlying filesystem supports locking).

     If O_NOFOLLOW is used in the mask and the target file passed to ooppeenn() is
     a symbolic link then the ooppeenn() will fail.

     If O_SYMLINK is used in the mask and the target file passed to ooppeenn() is
     a symbolic link then the ooppeenn() will be for the symbolic link itself, not
     what it links to.

     The O_EVTONLY flag is only intended for monitoring a file for changes
     (e.g. kqueue). Note: when this flag is used, the opened file will not
     prevent an unmount of the volume that contains the file.

     If successful, ooppeenn() returns a non-negative integer, termed a file
     descriptor.  It returns -1 on failure.  The file pointer (used to mark
     the current position within the file) is set to the beginning of the
     file.

     When a new file is created, it is given the group of the directory which
     contains it.

     The new descriptor is set to remain open across execve system calls; see
     close(2) and fcntl(2).

     The system imposes a limit on the number of file descriptors that can be
     held open simultaneously by one process.  Getdtablesize(2) returns the
     current system limit.

RREETTUURRNN VVAALLUUEESS
     If successful, ooppeenn() returns a non-negative integer, termed a file
     descriptor.  It returns -1 on failure, and sets _e_r_r_n_o to indicate the
     error.

EERRRROORRSS
     The named file is opened unless:

     [EACCES]		Search permission is denied for a component of the
			path prefix.

     [EACCES]		The required permissions (for reading and/or writing)
			are denied for the given flags.

     [EACCES]		O_CREAT is specified, the file does not exist, and the
			directory in which it is to be created does not permit
			writing.

     [EACCES]		O_TRUNC is specified and write permission is denied.

     [EAGAIN]		_p_a_t_h specifies the slave side of a locked pseudo-ter-
			minal device.

     [EDQUOT]		O_CREAT is specified, the file does not exist, and the
			directory in which the entry for the new file is being
			placed cannot be extended because the user's quota of
			disk blocks on the file system containing the direc-
			tory has been exhausted.

     [EDQUOT]		O_CREAT is specified, the file does not exist, and the
			user's quota of inodes on the file system on which the
			file is being created has been exhausted.

     [EEXIST]		O_CREAT and O_EXCL are specified and the file exists.

     [EFAULT]		_P_a_t_h points outside the process's allocated address
			space.

     [EINTR]		The ooppeenn() operation is interrupted by a signal.

     [EINVAL]		The value of _o_f_l_a_g is not valid.

     [EIO]		An I/O error occurs while making the directory entry
			or allocating the inode for O_CREAT.

     [EISDIR]		The named file is a directory, and the arguments spec-
			ify that it is to be opened for writing.

     [ELOOP]		Too many symbolic links are encountered in translating
			the pathname.  This is taken to be indicative of a
			looping symbolic link.

     [EMFILE]		The process has already reached its limit for open
			file descriptors.

     [ENAMETOOLONG]	A component of a pathname exceeds {NAME_MAX} charac-
			ters, or an entire path name exceeded {PATH_MAX} char-
			acters.

     [ENFILE]		The system file table is full.

     [ELOOP]		O_NOFOLLOW was specified and the target is a symbolic
			link.

     [ENOENT]		O_CREAT is not set and the named file does not exist.

     [ENOENT]		A component of the path name that must exist does not
			exist.

     [ENOSPC]		O_CREAT is specified, the file does not exist, and the
			directory in which the entry for the new file is being
			placed cannot be extended because there is no space
			left on the file system containing the directory.

     [ENOSPC]		O_CREAT is specified, the file does not exist, and
			there are no free inodes on the file system on which
			the file is being created.

     [ENOTDIR]		A component of the path prefix is not a directory.

     [ENXIO]		The named file is a character-special or block-special
			file and the device associated with this special file
			does not exist.

     [ENXIO]		O_NONBLOCK and O_WRONLY are set, the file is a FIFO,
			and no process has it open for reading.

     [EOPNOTSUPP]	O_SHLOCK or O_EXLOCK is specified, but the underlying
			filesystem does not support locking.

     [EOPNOTSUPP]	An attempt is made to open a socket (not currently
			implemented).

     [EOVERFLOW]	The named file is a regular file and its size does not
			fit in an object of type off_t.

     [EROFS]		The named file resides on a read-only file system, and
			the file is to be modified.

     [ETXTBSY]		The file is a pure procedure (shared text) file that
			is being executed and the ooppeenn() call requests write
			access.

CCOOMMPPAATTIIBBIILLIITTYY
     ooppeenn() on a terminal device (i.e., /dev/console) will now make that
     device a controlling terminal for the process.  Use the O_NOCTTY flag to
     open a terminal device without changing your controlling terminal.

SSEEEE AALLSSOO
     chmod(2), close(2), dup(2), getdtablesize(2), lseek(2), read(2),
     umask(2), write(2)

HHIISSTTOORRYY
     An ooppeenn() function call appeared in Version 6 AT&T UNIX.

4th Berkeley Distribution	October 7, 2008      4th Berkeley Distribution

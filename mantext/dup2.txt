DUP(2)			    BSD System Calls Manual			DUP(2)

NNAAMMEE
     dduupp, dduupp22 -- duplicate an existing file descriptor

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<uunniissttdd..hh>>

     _i_n_t
     dduupp(_i_n_t _f_i_l_d_e_s);

     _i_n_t
     dduupp22(_i_n_t _f_i_l_d_e_s, _i_n_t _f_i_l_d_e_s_2);

DDEESSCCRRIIPPTTIIOONN
     DDuupp() duplicates an existing object descriptor and returns its value to
     the calling process (_f_i_l_d_e_s_2 = dduupp(_f_i_l_d_e_s)).  The argument _f_i_l_d_e_s is a
     small non-negative integer index in the per-process descriptor table.
     The value must be less than the size of the table, which is returned by
     getdtablesize(2).	The new descriptor returned by the call is the lowest
     numbered descriptor currently not in use by the process.

     The object referenced by the descriptor does not distinguish between
     _f_i_l_d_e_s and _f_i_l_d_e_s_2 in any way.  Thus if _f_i_l_d_e_s_2 and _f_i_l_d_e_s are duplicate
     references to an open file, read(2), write(2) and lseek(2) calls all move
     a single pointer into the file, and append mode, non-blocking I/O and
     asynchronous I/O options are shared between the references.  If a sepa-
     rate pointer into the file is desired, a different object reference to
     the file must be obtained by issuing an additional open(2) call.  The
     close-on-exec flag on the new file descriptor is unset.

     In dduupp22(), the value of the new descriptor _f_i_l_d_e_s_2 is specified.  If this
     descriptor is already in use, the descriptor is first deallocated as if a
     close(2) call had been done first.

RREETTUURRNN VVAALLUUEESS
     Upon successful completion, the new file descriptor is returned.  Other-
     wise, a value of -1 is returned and the global integer variable _e_r_r_n_o is
     set to indicate the error.

EERRRROORRSS
     The dduupp() and dduupp22() system calls will fail if:

     [EBADF]		_f_i_l_d_e_s is not an active, valid file descriptor.

     [EINTR]		Execution is interrupted by a signal.

     [EMFILE]		Too many file descriptors are active.

     The dduupp22() system call will fail if:

     [EBADF]		_f_i_l_d_e_s_2 is negative or greater than the maximum allow-
			able number (see getdtablesize(2)).

SSEEEE AALLSSOO
     accept(2), close(2), fcntl(2), getdtablesize(2), open(2), pipe(2),
     socket(2), socketpair(2)

SSTTAANNDDAARRDDSS
     DDuupp() and dduupp22() are expected to conform to IEEE Std 1003.1-1988
     (``POSIX.1'').

4th Berkeley Distribution	 June 4, 1993	     4th Berkeley Distribution

POSIX_SPAWN(2)		    BSD System Calls Manual		POSIX_SPAWN(2)

NNAAMMEE
     ppoossiixx__ssppaawwnn ppoossiixx__ssppaawwnnpp -- spawn a process

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssppaawwnn..hh>>

     _i_n_t
     ppoossiixx__ssppaawwnn(_p_i_d___t _*_r_e_s_t_r_i_c_t _p_i_d, _c_o_n_s_t _c_h_a_r _*_r_e_s_t_r_i_c_t _p_a_t_h,
	 _c_o_n_s_t _p_o_s_i_x___s_p_a_w_n___f_i_l_e___a_c_t_i_o_n_s___t _*_f_i_l_e___a_c_t_i_o_n_s,
	 _c_o_n_s_t _p_o_s_i_x___s_p_a_w_n_a_t_t_r___t _*_r_e_s_t_r_i_c_t _a_t_t_r_p, _c_h_a_r _*_c_o_n_s_t _a_r_g_v_[_r_e_s_t_r_i_c_t_],
	 _c_h_a_r _*_c_o_n_s_t _e_n_v_p_[_r_e_s_t_r_i_c_t_]);

     _i_n_t
     ppoossiixx__ssppaawwnnpp(_p_i_d___t _*_r_e_s_t_r_i_c_t _p_i_d, _c_o_n_s_t _c_h_a_r _*_r_e_s_t_r_i_c_t _f_i_l_e,
	 _c_o_n_s_t _p_o_s_i_x___s_p_a_w_n___f_i_l_e___a_c_t_i_o_n_s___t _*_f_i_l_e___a_c_t_i_o_n_s,
	 _c_o_n_s_t _p_o_s_i_x___s_p_a_w_n_a_t_t_r___t _*_r_e_s_t_r_i_c_t _a_t_t_r_p, _c_h_a_r _*_c_o_n_s_t _a_r_g_v_[_r_e_s_t_r_i_c_t_],
	 _c_h_a_r _*_c_o_n_s_t _e_n_v_p_[_r_e_s_t_r_i_c_t_]);

DDEESSCCRRIIPPTTIIOONN
     The ppoossiixx__ssppaawwnn() function creates a new process from the executable
     file, called the _n_e_w _p_r_o_c_e_s_s _f_i_l_e, specified by _p_a_t_h, which is an abso-
     lute or relative path to the file.  The ppoossiixx__ssppaawwnnpp() function is iden-
     tical to the ppoossiixx__ssppaawwnn() function if the _f_i_l_e specified contains a
     slash character; otherwise, the _f_i_l_e parameter is used to construct a
     pathname, with its path prefix being obtained by a search of the path
     specified in the environment by the ``PATH variable''.  If this variable
     isn't specified, the default path is set according to the _PATH_DEFPATH
     definition in <_p_a_t_h_s_._h>, which is set to ``/usr/bin:/bin''.  This path-
     name either refers to an executable object file, or a file of data for an
     interpreter; execve(2) for more details.

     The argument _p_i_d is a pointer to a pid_t variable to receive the pid of
     the spawned process; if this is NULL, then the pid of the spawned process
     is not returned.  If this pointer is non-NULL, then on successful comple-
     tion, the variable will be modified to contain the pid of the spawned
     process.  The value is undefined in the case of a failure.

     The argument _f_i_l_e___a_c_t_i_o_n_s is either NULL, or it is a a pointer to a file
     actions object that was initialized by a call to
     posix_spawn_file_actions_init(3) and represents zero or more file
     actions.

     File descriptors open in the calling process image remain open in the new
     process image, except for those for which the close-on-exec flag is set
     (see close(2) and fcntl(2)).  Descriptors that remain open are unaffected
     by ppoossiixx__ssppaawwnn() unless their behaviour is modified by a file action; see
     posix_spawn_file_actions_init(3) for more information.

     The argument _a_t_t_r_p is either NULL, or it is a pointer to an attributes
     object that was initialized by a call to posix_spawnattr_init(3) and rep-
     resents a set of spawn attributes to apply.  If NULL, then the default
     attributes are applied; otherwise, these attributes can control various
     aspects of the spawned process, and are applied prior to the spawned
     process beginning execution; see posix_spawnattr_init(3) for more infor-
     mation.

     The argument _a_r_g_v is a pointer to a null-terminated array of character
     pointers to null-terminated character strings.  These strings construct
     the argument list to be made available to the new process.  At least
     _a_r_g_v_[_0_] must be present in the array, and should contain the file name of
     the program being spawned, e.g. the last component of the _p_a_t_h or _f_i_l_e
     argument.

     The argument _e_n_v_p is a pointer to a null-terminated array of character
     pointers to null-terminated strings.  A pointer to this array is normally
     stored in the global variable _e_n_v_i_r_o_n_. These strings pass information to
     the new process that is not directly an argument to the command (see
     environ(7)).

     Signals set to be ignored in the calling process are set to be ignored in
     the new process, unless the behaviour is modified by user specified _s_p_a_w_n
     _a_t_t_r_i_b_u_t_e_s.  Signals which are set to be caught in the calling process
     image are set to default action in the new process image.	Blocked sig-
     nals remain blocked regardless of changes to the signal action, unless
     the mask is overridden by user specified _s_p_a_w_n _a_t_t_r_i_b_u_t_e_s.  The signal
     stack is reset to be undefined (see sigaction(2) for more information).

     By default, the effective user ID and group ID will be the same as those
     of the calling process image; however, this may be overridden to force
     them to be the real user ID and group ID of the parent process by user
     specified _s_p_a_w_n _a_t_t_r_i_b_u_t_e_s (see posix_spawnattr_init(3) for more informa-
     tion).

     If the set-user-ID mode bit of the new process image file is set (see
     chmod(2)), the effective user ID of the new process image is set to the
     owner ID of the new process image file.  If the set-group-ID mode bit of
     the new process image file is set, the effective group ID of the new
     process image is set to the group ID of the new process image file.  (The
     effective group ID is the first element of the group list.)  The real
     user ID, real group ID and supplementary group IDs of the new process
     image remain the same as the calling process image.  After any set-user-
     ID and set-group-ID processing, the effective user ID is recorded as the
     saved set-user-ID, and the effective group ID is recorded as the saved
     set-group-ID.  These values may be used in changing the effective IDs
     later (see setuid(2)).

     The new process also inherits the following attributes from the calling
     process:

	   parent process ID	see getppid(2)
	   process group ID	see getpgrp(2), posix_spawnattr_init(3)
	   access groups	see getgroups(2)
	   working directory	see chdir(2)
	   root directory	see chroot(2)
	   control terminal	see termios(4)
	   resource usages	see getrusage(2)
	   interval timers	see getitimer(2)
	   resource limits	see getrlimit(2)
	   file mode mask	see umask(2)
	   signal mask		see sigaction(2), sigsetmask(2),
				posix_spawnattr_init(3)

     When a program is executed as a result of a ppoossiixx__ssppaawwnn() or
     ppoossiixx__ssppaawwnnpp() call, it is entered as follows:

	   main(argc, argv, envp)
	   int argc;
	   char **argv, **envp;

     where _a_r_g_c is the number of elements in _a_r_g_v (the ``arg count'') and _a_r_g_v
     points to the array of character pointers to the arguments themselves.

RREETTUURRNN VVAALLUUEESS
     If the _p_i_d argument is NULL, no pid is returned to the calling process;
     if it is non-NULL, then ppoossiixx__ssppaawwnn() and ppoossiixx__ssppaawwnnpp() functions return
     the process ID of the child process into the pid_t variable pointed to by
     the _p_i_d argument and return a 0 on success.  If an error occurs, they
     return a non-zero error code as the function return value, and no child
     process is created.

EERRRROORRSS
     The ppoossiixx__ssppaawwnn() and ppoossiixx__ssppaawwnnpp() functions will fail and return to
     the calling process if:

     [EINVAL]		The value specified by _f_i_l_e___a_c_t_i_o_n_s or _a_t_t_r_p is
			invalid.

     [E2BIG]		The number of bytes in the new process's argument list
			is larger than the system-imposed limit.  This limit
			is specified by the sysctl(3) MIB variable
			KERN_ARGMAX.

     [EACCES]		Search permission is denied for a component of the
			path prefix.

     [EACCES]		The new process file is not an ordinary file.

     [EACCES]		The new process file mode denies execute permission.

     [EACCES]		The new process file is on a filesystem mounted with
			execution disabled (MNT_NOEXEC in <_s_y_s_/_m_o_u_n_t_._h>).

     [EFAULT]		The new process file is not as long as indicated by
			the size values in its header.

     [EFAULT]		_P_a_t_h, _a_r_g_v, or _e_n_v_p point to an illegal address.

     [EIO]		An I/O error occurred while reading from the file sys-
			tem.

     [ELOOP]		Too many symbolic links were encountered in translat-
			ing the pathname.  This is taken to be indicative of a
			looping symbolic link.

     [ENAMETOOLONG]	A component of a pathname exceeded {NAME_MAX} charac-
			ters, or an entire path name exceeded {PATH_MAX} char-
			acters.

     [ENOENT]		The new process file does not exist.

     [ENOEXEC]		The new process file has the appropriate access per-
			mission, but has an unrecognized format (e.g., an
			invalid magic number in its header).

     [ENOMEM]		The new process requires more virtual memory than is
			allowed by the imposed maximum (getrlimit(2)).

     [ENOTDIR]		A component of the path prefix is not a directory.

     [ETXTBSY]		The new process file is a pure procedure (shared text)
			file that is currently open for writing or reading by
			some process.

CCAAVVEEAATT
     If a program is _s_e_t_u_i_d to a non-super-user, but is executed when the real
     _u_i_d is ``root'', then the program has some of the powers of a super-user
     as well.

SSEEEE AALLSSOO
     exit(2), fork(2), execl(3), sysctl(3), environ(7),
     posix_spawnattr_init(3), posix_spawn_file_actions_init(3),

SSTTAANNDDAARRDDSS
     Version 3 of the Single UNIX Specification (``SUSv3'') [SPN]

HHIISSTTOORRYY
     The ppoossiixx__ssppaawwnn() and ppoossiixx__ssppaawwnnpp() function calls appeared in Version 3
     of the Single UNIX Specification (``SUSv3'') [SPN].

Mac OS X			August 9, 2007			      Mac OS X

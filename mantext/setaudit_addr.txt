mdoc warning: Empty input line #57
Not a \-mdoc command: .PP (#80)
mdoc warning: Empty input line #81
mdoc warning: Empty input line #88
Not a \-mdoc command: .PP (#96)
mdoc warning: Empty input line #97
mdoc warning: Empty input line #104
mdoc warning: Empty input line #110
Not a \-mdoc command: .PP (#113)
mdoc warning: Empty input line #134
mdoc warning: Empty input line #152
SETAUDIT(2)		    BSD System Calls Manual		   SETAUDIT(2)

NNAAMMEE
     sseettaauuddiitt, sseettaauuddiitt__aaddddrr -- set audit session state

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<bbssmm//aauuddiitt..hh>>

     _i_n_t
     sseettaauuddiitt(_a_u_d_i_t_i_n_f_o___t _*_a_u_d_i_t_i_n_f_o);

     _i_n_t
     sseettaauuddiitt__aaddddrr(_a_u_d_i_t_i_n_f_o___a_d_d_r___t _*_a_u_d_i_t_i_n_f_o___a_d_d_r, _u___i_n_t _l_e_n_g_t_h);

DDEESSCCRRIIPPTTIIOONN
     The sseettaauuddiitt() system call sets the active audit session state for the
     current process via the _a_u_d_i_t_i_n_f_o___t pointed to by _a_u_d_i_t_i_n_f_o.  The
     sseettaauuddiitt__aaddddrr() system call sets extended state via _a_u_d_i_t_i_n_f_o___a_d_d_r and
     _l_e_n_g_t_h.

     The _a_u_d_i_t_i_n_f_o___t data structure is defined as follows:

	 struct auditinfo {
	      au_id_t	     ai_auid;	      /* Audit user ID */
	      au_mask_t      ai_mask;	      /* Audit masks */
	      au_tid_t	     ai_termid;       /* Terminal ID */
	      au_asid_t      ai_asid;	      /* Audit session ID */
	 };
	 typedef struct auditinfo	 auditinfo_t;

     The _a_i___a_u_i_d variable contains the audit identifier which is recorded in
     the audit log for each event the process caused.  The value of AU_DEFAU-
     DITID (-1) should not be used.  The exception is if the value of audit
     identifier is known at the start of the session but will be determined
     and set later.  Until _a_i___a_u_i_d is set to something other than AU_DEFAUDI-
     TID any audit events generated by the system with be filtered by the non-
     attributed audit mask.

     The _a_u___m_a_s_k___t data structure defines the bit mask for auditing successful
     and failed events out of the predefined list of event classes. It is
     defined as follows:

	 struct au_mask {
	      unsigned int    am_success;     /* success bits */
	      unsigned int    am_failure;     /* failure bits */
	 };
	 typedef struct au_mask  au_mask_t;

     The _a_u___t_e_r_m_i_d___t data structure defines the Terminal ID recorded with
     every event caused by the process. It is defined as follows:

	 struct au_tid {
	      dev_t	      port;
	      u_int32_t       machine;
	 };
	 typedef struct au_tid	 au_tid_t;

     The _a_i___a_s_i_d variable contains the audit session ID which is recorded with
     every event caused by the process.  It can be any value in the range 1 to
     PID_MAX (99999).  If the value of AU_ASSIGN_ASID is used for _a_i___a_s_i_d a
     unique session ID will be generated by the kernel.  The audit session ID
     will be returned in _a_i___a_s_i_d field on success.

     The sseettaauuddiitt__aaddddrr() system call uses the expanded _a_u_d_i_t_i_n_f_o___a_d_d_r___t data
     structure supports Terminal IDs with larger addresses such as those used
     in IP version 6.  It is defined as follows:

	 struct auditinfo_addr {
	      au_id_t	      ai_auid;	      /* Audit user ID. */
	      au_mask_t       ai_mask;	      /* Audit masks. */
	      au_tid_addr_t   ai_termid;      /* Terminal ID. */
	      au_asid_t       ai_asid;	      /* Audit session ID. */
	      u_int64_t       ai_flags;       /* Audit session flags */
	 };
	 typedef struct auditinfo_addr	 auditinfo_addr_t;

     The _a_u___t_i_d___a_d_d_r___t data structure which includes a larger address storage
     field and an additional field with the type of address stored:

	 struct au_tid_addr {
	      dev_t	      at_port;
	      u_int32_t       at_type;
	      u_int32_t       at_addr[4];
	 };
	 typedef struct au_tid_addr	 au_tid_addr_t;

     The _a_i___f_l_a_g_s field is opaque to the kernel and can be used to store user
     defined session flags.

     These system calls require an appropriate privilege to complete.

     These system calls should only be called once at the start of a new ses-
     sion and not again during the same session to update the session informa-
     tion.  There are some exceptions, however.  The _a_i___a_u_i_d field may be
     updated later if initially set to the value of AU_DEFAUDITID (-1).  Like-
     wise, the _a_i___t_e_r_m_i_d fields may be updated later if the _a_t___t_y_p_e field in
     _a_u___t_i_d___a_d_d_r is set to AU_IPv4 and the other _a_i___t_i_d___a_d_d_r fields are all
     set to zero.  The _a_i___f_l_a_g_s field can only be set when a new session is
     initially created.  Creating a new session is done by setting the _a_i___a_s_i_d
     field to an unique session value or AU_ASSIGN_ASID.  These system calls
     will fail when attempting to change the _a_i___a_u_i_d, _a_i___t_e_r_m_i_d, or _a_i___f_l_a_g_s
     fields once set to something other than the default values.  The audit
     preselection masks may be changed at any time but are usually updated
     with auditon(2) using the A_SETPMASK command.

RREETTUURRNN VVAALLUUEESS
     The sseettaauuddiitt() and sseettaauuddiitt__aaddddrr() functions return the value 0 if suc-
     cessful; otherwise the value -1 is returned and the global variable _e_r_r_n_o
     is set to indicate the error.

EERRRROORRSS
     [EFAULT]		A failure occurred while data transferred to or from
			the kernel failed.

     [EINVAL]		Illegal argument was passed by a system call.

     [EPERM]		The process does not have sufficient permission to
			complete the operation.

SSEEEE AALLSSOO
     audit(2), auditon(2), getaudit(2), getauid(2), setauid(2), libbsm(3)

HHIISSTTOORRYY
     The OpenBSM implementation was created by McAfee Research, the security
     division of McAfee Inc., under contract to Apple Computer Inc. in 2004.
     It was subsequently adopted by the TrustedBSD Project as the foundation
     for the OpenBSM distribution.

AAUUTTHHOORRSS
     This software was created by McAfee Research, the security research divi-
     sion of McAfee, Inc., under contract to Apple Computer Inc.  Additional
     authors include Wayne Salamon, Robert Watson, and SPARTA Inc.

     The Basic Security Module (BSM) interface to audit records and audit
     event stream format were defined by Sun Microsystems.

     This manual page was written by Robert Watson <rwatson@FreeBSD.org> and
     Stacey Son <sson@FreeBSD.org>.

BSD				March 23, 2009				   BSD

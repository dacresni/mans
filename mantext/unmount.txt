MOUNT(2)		    BSD System Calls Manual		      MOUNT(2)

NNAAMMEE
     mmoouunntt, uunnmmoouunntt -- mount or dismount a filesystem

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ppaarraamm..hh>>
     ##iinncclluuddee <<ssyyss//mmoouunntt..hh>>

     _i_n_t
     mmoouunntt(_c_o_n_s_t _c_h_a_r _*_t_y_p_e, _c_o_n_s_t _c_h_a_r _*_d_i_r, _i_n_t _f_l_a_g_s, _v_o_i_d _*_d_a_t_a);

     _i_n_t
     uunnmmoouunntt(_c_o_n_s_t _c_h_a_r _*_d_i_r, _i_n_t _f_l_a_g_s);

DDEESSCCRRIIPPTTIIOONN
     The mmoouunntt() function grafts a filesystem object onto the system file tree
     at the point _d_i_r.	The argument _d_a_t_a describes the filesystem object to
     be mounted.  The argument _t_y_p_e tells the kernel how to interpret _d_a_t_a
     (See _t_y_p_e below).	The contents of the filesystem become available
     through the new mount point _d_i_r.  Any files in _d_i_r at the time of a suc-
     cessful mount are swept under the carpet so to speak, and are unavailable
     until the filesystem is unmounted.

     The following _f_l_a_g_s may be specified to suppress default semantics which
     affect filesystem access.

     MNT_RDONLY       The filesystem should be treated as read-only; Even the
		      super-user may not write on it.

     MNT_NOEXEC       Do not allow files to be executed from the filesystem.

     MNT_NOSUID       Do not honor setuid or setgid bits on files when execut-
		      ing them.

     MNT_NODEV	      Do not interpret special files on the filesystem.

     MNT_UNION	      Union with underlying filesystem instead of obscuring
		      it.

     MNT_SYNCHRONOUS  All I/O to the filesystem should be done synchronously.

     The flag MNT_UPDATE indicates that the mount command is being applied to
     an already mounted filesystem.  This allows the mount flags to be changed
     without requiring that the filesystem be unmounted and remounted.	Some
     filesystems may not allow all flags to be changed.  For example, most
     filesystems will not allow a change from read-write to read-only.

     The flag MNT_RELOAD causes the vfs subsystem to update its data struc-
     tures pertaining to the specified already mounted filesystem.

     The _t_y_p_e argument defines the type of the filesystem.

     _D_a_t_a is a pointer to a structure that contains the type specific argu-
     ments to mount.  The format for these argument structures is described in
     the manual page for each filesystem.

     The uummoouunntt() function call disassociates the filesystem from the speci-
     fied mount point _d_i_r.

     The _f_l_a_g_s argument may specify MNT_FORCE to specify that the filesystem
     should be forcibly unmounted even if files are still active.  Active spe-
     cial devices continue to work, but any further accesses to any other
     active files result in errors even if the filesystem is later remounted.

RREETTUURRNN VVAALLUUEESS
     The mmoouunntt() returns the value 0 if the mount was successful, otherwise -1
     is returned and the variable _e_r_r_n_o is set to indicate the error.

     UUmmoouunntt returns the value 0 if the umount succeeded; otherwise -1 is
     returned and the variable _e_r_r_n_o is set to indicate the error.

EERRRROORRSS
     MMoouunntt() will fail when one of the following occurs:

     [EPERM]	     The caller is not the super-user, and the device-node and
		     the mountpoint do not have adequate ownership and permis-
		     sions.

     [ENAMETOOLONG]  A component of a pathname exceeded {NAME_MAX} characters,
		     or an entire path name exceeded {PATH_MAX} characters.

     [ELOOP]	     Too many symbolic links were encountered in translating a
		     pathname.

     [ENOENT]	     A component of _d_i_r does not exist.

     [ENOTDIR]	     A component of _n_a_m_e is not a directory, or a path prefix
		     of _s_p_e_c_i_a_l is not a directory.

     [EINVAL]	     A pathname contains a character with the high-order bit
		     set.

     [EBUSY]	     Another process currently holds a reference to _d_i_r.

     [EFAULT]	     _D_i_r points outside the process's allocated address space.

     UUmmoouunntt may fail with one of the following errors:

     [EPERM]	     The caller is not the super-user, and the mmoouunntt(()) was not
		     done by the user.

     [ENOTDIR]	     A component of the path is not a directory.

     [EINVAL]	     The pathname contains a character with the high-order bit
		     set.

     [ENAMETOOLONG]  A component of a pathname exceeded {NAME_MAX} characters,
		     or an entire path name exceeded {PATH_MAX} characters.

     [ELOOP]	     Too many symbolic links were encountered in translating
		     the pathname.

     [EINVAL]	     The requested directory is not in the mount table.

     [EBUSY]	     A process is holding a reference to a file located on the
		     filesystem.

     [EIO]	     An I/O error occurred while writing cached filesystem
		     information.

     [EFAULT]	     _D_i_r points outside the process's allocated address space.

SSEEEE AALLSSOO
     mount(8), umount(8)

BBUUGGSS
     Some of the error codes need translation to more obvious messages.

HHIISSTTOORRYY
     MMoouunntt() and uummoouunntt() function calls appeared in Version 6 AT&T UNIX.

4th Berkeley Distribution      December 11, 1993     4th Berkeley Distribution

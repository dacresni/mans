.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AA_CHANGE_HAT 2"
.TH AA_CHANGE_HAT 2 "2007-07-27" "NOVELL/SUSE" "AppArmor"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
aa_change_hat  \- change to or from a "hat" within a AppArmor profile
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fB#include <sys/apparmor.h>\fR
.PP
\&\fBint aa_change_hat (char *subprofile, unsigned long magic_token);\fR
\&\fBint aa_change_hatv (char *subprofiles[], unsigned long magic_token);\fR
\&\fBint aa_change_hat_vargs (unsigned long magic_token, ...);\fR
.PP
Link with \fB\-lapparmor\fR when compiling.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An AppArmor profile applies to an executable program; if a portion of
the program needs different access permissions than other portions,
the program can \*(L"change hats\*(R" to a different role, also known as a
subprofile.
.PP
To change into a new hat, it calls one of the family of change_hat
functions to do so. It passes in a pointer to the \fIsubprofile\fR which it
wants to change into, and a 64bit \fImagic_token\fR.  The \fImagic_token\fR
is used to return out of the subprofile at a later time.
.PP
The \fIaa_change_hat()\fR function allows specifying the name of a single
\&\fIsubprofile\fR that the application wants to change into.  A pointer to the
name of the \fIsubprofile\fR is passed along with the \fImagic_token\fR.  If the
profile is not present the call will fail with the appropriate error.
.PP
The \fIaa_change_hatv()\fR function allows passing a \fI\s-1NULL\s0\fR terminated vector
of pointers to \fIsubprofile\fR names which will be tried in order.  The
first \fIsubprofile\fR in the vector that exists will be transitioned to
and if none of the \fIsubprofiles\fR exist the call will fail with the
appropriate error.
.PP
The \fIaa_change_hat_vargs()\fR function is a convenience wrapper for the
\&\fIaa_change_hatv()\fR function.  After the \fImagic_token\fR it takes an arbitrary
number of pointers to \fIsubprofile\fR names.  Similar to \fIexecl\fR\|(3),
\&\fIaa_change_hat_vargs()\fR assembles the list of \fIsubprofile\fR names into a
vector and calls \fIaa_change_hatv()\fR.
.PP
If a program wants to return out of the current subprofile to the
original profile, it calls \fIaa_change_hat()\fR with a pointer to \s-1NULL\s0 as
the \fIsubprofile\fR, and the original \fImagic_token\fR value. If the
\&\fImagic_token\fR does not match the original \fImagic_token\fR passed into the
kernel when the program entered the subprofile, the change back to the
original profile will not happen, and the current task will be killed.
If the \fImagic_token\fR matches the original token, then the process will
change back to the original profile.
.PP
As both \fIread\fR\|(2) and \fIwrite\fR\|(2) are mediated, a file must be listed in a
subprofile definition if the file is to be accessed while the process
is in a \*(L"hat\*(R".
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
On success zero is returned. On error, \-1 is returned, and
\&\fIerrno\fR\|(3) is set appropriately.
.SH "ERRORS"
.IX Header "ERRORS"
.IP "\fB\s-1EINVAL\s0\fR" 4
.IX Item "EINVAL"
The apparmor kernel module is not loaded or the communication via the
\&\fI/proc/*/attr/current\fR file did not conform to protocol.
.IP "\fB\s-1ENOMEM\s0\fR" 4
.IX Item "ENOMEM"
Insufficient kernel memory was available.
.IP "\fB\s-1EPERM\s0\fR" 4
.IX Item "EPERM"
The calling application is not confined by apparmor.
.IP "\fB\s-1ECHILD\s0\fR" 4
.IX Item "ECHILD"
The application's profile has no hats defined for it.
.IP "\fB\s-1EACCES\s0\fR" 4
.IX Item "EACCES"
The specified \fIsubprofile\fR does not exist in this profile or the
process tried to change another process's domain.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
The following code examples shows simple, if contrived, uses of
\&\fIaa_change_hat()\fR; a typical use of \fIaa_change_hat()\fR will separate
privileged portions of a process from unprivileged portions of a process,
such as keeping unauthenticated network traffic handling separate
from authenticated network traffic handling in OpenSSH or executing
user-supplied \s-1CGI\s0 scripts in apache.
.PP
The use of \fIrandom\fR\|(3) is simply illustrative. Use of \fI/dev/urandom\fR is
recommended.
.PP
First, a simple high-level overview of \fIaa_change_hat()\fR use:
.PP
.Vb 2
\& void foo (void) {
\&        unsigned long magic_token;
\&  
\&        /* get a random magic token value
\&        from our huge entropy pool */
\&        magic_token = random_function();
\& 
\&        /* change into the subprofile while
\&         * we do stuff we don\*(Aqt trust */
\&        aa_change_hat("stuff_we_dont_trust", magic_token);
\&
\&        /* Go do stuff we don\*(Aqt trust \-\- this is all
\&         * done in *this* process space, no separate
\&         * fork()/exec()\*(Aqs are done. */
\&        interpret_perl_stuff(stuff_from_user);
\&
\&        /* now change back to our original profile */
\&        aa_change_hat(NULL, magic_token);
\& }
.Ve
.PP
Second, an example to show that files not listed in a subprofile (\*(L"hat\*(R")
aren't accessible after an \fIaa_change_hat()\fR call:
.PP
.Vb 8
\& #include <stdlib.h>
\& #include <string.h>
\& #include <sys/apparmor.h>
\& #include <sys/types.h>
\& #include <sys/stat.h>
\& #include <fcntl.h>
\& #include <stdio.h>
\& #include <unistd.h>
\& 
\& 
\& int main(int argc, char *argv[]) {
\&        int fd;
\&        unsigned long tok;
\&        char buf[10];
\& 
\&        /* random() is a poor choice */
\&        tok = random();
\& 
\&        /* open /etc/passwd outside of any hat */
\&        if ((fd=open("/etc/passwd", O_RDONLY)) < 0)
\&                perror("Failure opening /etc/passwd");
\& 
\&        /* confirm for ourselves that we can really read /etc/passwd */
\&        memset(&buf, 0, 10);
\&        if (read(fd, &buf, 10) == \-1) {
\&                perror("Failure reading /etc/passwd pre\-hat");
\&                _exit(1);
\&        }
\&        buf[9] = \*(Aq\e0\*(Aq;
\&        printf("/etc/passwd: %s\en", buf);
\& 
\&        /* change hat to the "hat" subprofile, which should not have
\&         * read access to /etc/passwd \-\- even though we have a valid
\&         * file descriptor at the time of the aa_change_hat() call. */
\&        if (aa_change_hat("hat", tok)) {
\&                perror("Failure changing hat \-\- aborting");
\&                _exit(1);
\&        }
\& 
\&        /* confirm that we cannot read /etc/passwd */
\&        lseek(fd,0,SEEK_SET);
\&        memset(&buf, 0, 10);
\&        if (read(fd, &buf, 10) == \-1)
\&                perror("Failure reading /etc/passwd post\-hat");
\&        buf[9] = \*(Aq\e0\*(Aq;
\&        printf("/etc/passwd: %s\en", buf);
\& 
\&        return 0;
\& }
.Ve
.PP
This code example requires the following profile to be loaded with
\&\fIapparmor_parser\fR\|(8):
.PP
.Vb 9
\& /tmp/ch {
\&   /etc/ld.so.cache               mr,
\&   /etc/locale/**                 r,
\&   /etc/localtime                 r,
\&   /usr/share/locale/**           r,
\&   /usr/share/zoneinfo/**         r,
\&   /usr/lib/locale/**             mr,
\&   /usr/lib/gconv/*.so            mr,
\&   /usr/lib/gconv/gconv\-modules*  mr,
\&
\&   /lib/ld\-*.so*         mrix,
\&   /lib/libc*.so*        mr,
\&   /lib/libapparmor*.so* mr,
\&   /dev/pts/*            rw,
\&   /tmp/ch               mr,
\&
\&   /etc/passwd           r,
\&
\&   ^hat {
\&     /dev/pts/*     rw,
\&   }
\& }
.Ve
.PP
The output when run:
.PP
.Vb 5
\& $ /tmp/ch
\& /etc/passwd: root:x:0:
\& Failure reading /etc/passwd post\-hat: Permission denied
\& /etc/passwd:
\& $
.Ve
.SH "BUGS"
.IX Header "BUGS"
None known. If you find any, please report them at
<http://https://bugs.launchpad.net/apparmor/+filebug>. Note that
\&\fIaa_change_hat\fR\|(2) provides no memory barriers between different areas of a
program; if address space separation is required, then separate processes
should be used.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIapparmor\fR\|(7), \fIapparmor.d\fR\|(5), \fIapparmor_parser\fR\|(8), \fIaa_change_profile\fR\|(2) and
<http://wiki.apparmor.net>.

.\" Copyright (C) 2003 Free Software Foundation, Inc.
.\" This file is distributed according to the GNU General Public License.
.\" See the file COPYING in the top level source directory for details.
.\"
.\" .de Sh \" Subsection
.\" .br
.\" .if t .Sp
.\" .ne 5
.\" .PP
.\" \fB\\$1\fP
.\" .PP
.\" ..
.\" .de Sp \" Vertical space (when we can't use .PP)
.\" .if t .sp .5v
.\" .if n .sp
.\" ..
.\" .de Ip \" List item
.\" .br
.\" .ie \\n(.$>=3 .ne \\$3
.\" .el .ne 3
.\" .IP "\\$1" \\$2
.\" ..
.TH IO_SETUP 2 2008-06-18 "Linux" "Linux Programmer's Manual"
.SH NAME
io_setup \- create an asynchronous I/O context
.SH "SYNOPSIS"
.nf
.\" .ad l
.\" .hy 0
.B #include <libaio.h>
.\" #include <linux/aio.h>
.sp
.\" .HP 15
.BI "int io_setup(unsigned " nr_events ", aio_context_t *" ctxp );
.\" .ad
.\" .hy
.sp
Link with \fI\-laio\fP.
.fi
.SH "DESCRIPTION"
.PP
.BR io_setup ()
creates an asynchronous I/O context capable of receiving
at least \fInr_events\fP.
\fIctxp\fP must not point to an AIO context that already exists, and must
be initialized to 0 prior to the call.
On successful creation of the AIO context, \fI*ctxp\fP is filled in
with the resulting handle.
.SH "RETURN VALUE"
On success,
.BR io_setup ()
returns 0.
For the failure return, see NOTES.
.SH "ERRORS"
.TP
.B EAGAIN
The specified \fInr_events\fP exceeds the user's limit of available events.
.TP
.B EFAULT
An invalid pointer is passed for \fIctxp\fP.
.TP
.B EINVAL
\fIctxp\fP is not initialized, or the specified \fInr_events\fP
exceeds internal limits.
\fInr_events\fP should be greater than 0.
.TP
.B ENOMEM
Insufficient kernel resources are available.
.TP
.B ENOSYS
.BR io_setup ()
is not implemented on this architecture.
.SH "VERSIONS"
.PP
The asynchronous I/O system calls first appeared in Linux 2.5, August 2002.
.SH "CONFORMING TO"
.PP
.BR io_setup ()
is Linux-specific and should not be used in programs
that are intended to be portable.
.SH NOTES
Glibc does not provide a wrapper function for this system call.

The wrapper provided in
.I libaio
for
.BR io_setup ()
does not follow the usual C library conventions for indicating error:
on error it returns a negated error number
(the negative of one of the values listed in ERRORS).
If the system call is invoked via
.BR syscall (2),
then the return value follows the usual conventions for
indicating an error: \-1, with
.I errno
set to a (positive) value that indicates the error.
.SH "SEE ALSO"
.BR io_cancel (2),
.BR io_destroy (2),
.BR io_getevents (2),
.BR io_submit (2)
.\" .SH "NOTES"
.\" .PP
.\" The asynchronous I/O system calls were written by Benjamin LaHaise.
.\" .SH AUTHOR
.\" Kent Yoder.
.SH COLOPHON
This page is part of release 3.27 of the Linux
.I man-pages
project.
A description of the project,
and information about reporting bugs,
can be found at
http://www.kernel.org/doc/man-pages/.

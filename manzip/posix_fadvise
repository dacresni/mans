.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright 2003 Abhijit Menon-Sen <ams@wiw.org>
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" 2005-04-08 mtk, noted kernel version and added BUGS
.\"
.TH POSIX_FADVISE 2 2010-09-20 "Linux" "Linux Programmer's Manual"
.SH NAME
posix_fadvise \- predeclare an access pattern for file data
.SH SYNOPSIS
.nf
.B #include <fcntl.h>
.sp
.BI "int posix_fadvise(int " fd ", off_t " offset ", off_t " len \
", int " advice ");"
.fi
.sp
.ad l
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR posix_fadvise ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad
.SH DESCRIPTION
Programs can use
.BR posix_fadvise ()
to announce an intention to access
file data in a specific pattern in the future, thus allowing the kernel
to perform appropriate optimizations.

The \fIadvice\fP applies to a (not necessarily existent) region starting
at \fIoffset\fP and extending for \fIlen\fP bytes (or until the end of
the file if \fIlen\fP is 0) within the file referred to by \fIfd\fP.
The advice is not binding; it merely constitutes an expectation on behalf of
the application.

Permissible values for \fIadvice\fP include:
.TP
.B POSIX_FADV_NORMAL
Indicates that the application has no advice to give about its access
pattern for the specified data.
If no advice is given for an open file,
this is the default assumption.
.TP
.B POSIX_FADV_SEQUENTIAL
The application expects to access the specified data sequentially (with
lower offsets read before higher ones).
.TP
.B POSIX_FADV_RANDOM
The specified data will be accessed in random order.
.TP
.B POSIX_FADV_NOREUSE
The specified data will be accessed only once.
.TP
.B POSIX_FADV_WILLNEED
The specified data will be accessed in the near future.
.TP
.B POSIX_FADV_DONTNEED
The specified data will not be accessed in the near future.
.SH "RETURN VALUE"
On success, zero is returned.
On error, an error number is returned.
.SH ERRORS
.TP
.B EBADF
The \fIfd\fP argument was not a valid file descriptor.
.TP
.B EINVAL
An invalid value was specified for \fIadvice\fP.
.TP
.B ESPIPE
The specified file descriptor refers to a pipe or FIFO.
(Linux actually
returns
.B EINVAL
in this case.)
.SH VERSIONS
.BR posix_fadvise ()
appeared in kernel 2.5.60.
Glibc support has been provided since version 2.2.
.\" Actually as fadvise64() -- MTK
.SH "CONFORMING TO"
POSIX.1-2001.
Note that the type of the
.I len
argument was changed from
.I size_t
to
.I off_t
in POSIX.1-2003 TC1.
.SH NOTES
Under Linux, \fBPOSIX_FADV_NORMAL\fP sets the readahead window to the
default size for the backing device; \fBPOSIX_FADV_SEQUENTIAL\fP doubles
this size, and \fBPOSIX_FADV_RANDOM\fP disables file readahead entirely.
These changes affect the entire file, not just the specified region
(but other open file handles to the same file are unaffected).

\fBPOSIX_FADV_WILLNEED\fP initiates a
nonblocking read of the specified region into the page cache.
The amount of data read may be decreased by the kernel depending
on virtual memory load.
(A few megabytes will usually be fully satisfied,
and more is rarely useful.)

In kernels before 2.6.18, \fBPOSIX_FADV_NOREUSE\fP had the
same semantics as \fBPOSIX_FADV_WILLNEED\fP.
This was probably a bug; since kernel 2.6.18, this flag is a no-op.

\fBPOSIX_FADV_DONTNEED\fP attempts to free cached pages associated with
the specified region.
This is useful, for example, while streaming large
files.
A program may periodically request the kernel to free cached data
that has already been used, so that more useful cached pages are not
discarded instead.

Pages that have not yet been written out will be unaffected, so if the
application wishes to guarantee that pages will be released, it should
call
.BR fsync (2)
or
.BR fdatasync (2)
first.
.SH BUGS
In kernels before 2.6.6, if
.I len
was specified as 0, then this was interpreted literally as "zero bytes",
rather than as meaning "all bytes through to the end of the file".
.SH "SEE ALSO"
.BR readahead (2),
.BR sync_file_range (2),
.BR posix_fallocate (3),
.BR posix_madvise (3),
.\" FIXME . Write a posix_fadvise(3) page.
.BR feature_test_macros (7)
.SH COLOPHON
This page is part of release 3.27 of the Linux
.I man-pages
project.
A description of the project,
and information about reporting bugs,
can be found at
http://www.kernel.org/doc/man-pages/.

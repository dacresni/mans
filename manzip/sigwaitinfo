.\" Copyright (c) 2002 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.TH SIGWAITINFO 2 2008-10-04 "Linux" "Linux Programmer's Manual"
.SH NAME
sigwaitinfo, sigtimedwait \- synchronously wait for queued signals
.SH SYNOPSIS
.nf
.B #include <signal.h>
.sp
.BI "int sigwaitinfo(const sigset_t *" set ", siginfo_t *" info ");"
.sp
.BI "int sigtimedwait(const sigset_t *" set ", siginfo_t *" info ", "
.BI "                 const struct timespec *" timeout ");"
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR sigwaitinfo (),
.BR sigtimedwait ():
_POSIX_C_SOURCE\ >=\ 199309L
.SH DESCRIPTION
.BR sigwaitinfo ()
suspends execution of the calling thread until one of the signals in
.I set
is delivered.
(If one of the signals in
.I set
is already pending for the calling thread,
.BR sigwaitinfo ()
will return immediately with information about that signal.)

.BR sigwaitinfo ()
removes the delivered signal from the set of pending
signals and returns the signal number as its function result.
If the
.I info
argument is not NULL,
then it returns a structure of type
.I siginfo_t
(see
.BR sigaction (2))
containing information about the signal.
.PP
Signals returned via
.BR sigwaitinfo ()
are delivered in the usual order; see
.BR signal (7)
for further details.
.PP
.BR sigtimedwait ()
operates in exactly the same way as
.BR sigwaitinfo ()
except that it has an additional argument,
.IR timeout ,
which enables an upper bound to be placed on the time for which
the thread is suspended.
This argument is of the following type:
.sp
.in +4n
.nf
struct timespec {
    long    tv_sec;         /* seconds */
    long    tv_nsec;        /* nanoseconds */
}
.fi
.in
.sp
If both fields of this structure are specified as 0, a poll is performed:
.BR sigtimedwait ()
returns immediately, either with information about a signal that
was pending for the caller, or with an error
if none of the signals in
.I set
was pending.
.SH "RETURN VALUE"
On success, both
.BR sigwaitinfo ()
and
.BR sigtimedwait ()
return a signal number (i.e., a value greater than zero).
On failure both calls return \-1, with
.I errno
set to indicate the error.
.SH ERRORS
.TP
.B EAGAIN
No signal in
.I set
was delivered within the
.I timeout
period specified to
.BR sigtimedwait ().
.TP
.B EINTR
The wait was interrupted by a signal handler; see
.BR signal (7).
(This handler was for a signal other than one of those in
.IR set .)
.TP
.B EINVAL
.I timeout
was invalid.
.SH "CONFORMING TO"
POSIX.1-2001.
.SH NOTES
In normal usage, the calling program blocks the signals in
.I set
via a prior call to
.BR sigprocmask (2)
(so that the default disposition for these signals does not occur if they
are delivered between successive calls to
.BR sigwaitinfo ()
or
.BR sigtimedwait ())
and does not establish handlers for these signals.
In a multithreaded program,
the signal should be blocked in all threads to prevent
the signal being delivered to a thread other than the one calling
.BR sigwaitinfo ()
or
.BR sigtimedwait ()).

The set of signals that is pending for a given thread is the
union of the set of signals that is pending specifically for that thread
and the set of signals that is pending for the process as a whole (see
.BR signal (7)).

If multiple threads of a process are blocked
waiting for the same signal(s) in
.BR sigwaitinfo ()
or
.BR sigtimedwait (),
then exactly one of the threads will actually receive the
signal if it is delivered to the process as a whole;
which of the threads receives the signal is indeterminate.

POSIX leaves the meaning of a NULL value for the
.I timeout
argument of
.BR sigtimedwait ()
unspecified, permitting the possibility that this has the same meaning
as a call to
.BR sigwaitinfo (),
and indeed this is what is done on Linux.

On Linux,
.BR sigwaitinfo ()
is a library function implemented on top of
.BR sigtimedwait ().
.SH "SEE ALSO"
.BR kill (2),
.BR sigaction (2),
.BR signal (2),
.BR signalfd (2),
.BR sigpending (2),
.BR sigprocmask (2),
.BR sigqueue (2),
.BR sigsetops (3),
.BR sigwait (3),
.BR signal (7),
.BR time (7)
.SH COLOPHON
This page is part of release 3.27 of the Linux
.I man-pages
project.
A description of the project,
and information about reporting bugs,
can be found at
http://www.kernel.org/doc/man-pages/.
